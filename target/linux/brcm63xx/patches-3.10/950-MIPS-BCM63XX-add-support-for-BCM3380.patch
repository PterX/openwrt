--- a/arch/mips/bcm63xx/boards/board_bcm963xx.c
+++ b/arch/mips/bcm63xx/boards/board_bcm963xx.c
@@ -4992,6 +4992,8 @@ void __init board_prom_init(void)
 	 */
 	if (BCMCPU_IS_6318() || BCMCPU_IS_6328() || BCMCPU_IS_6362() || BCMCPU_IS_63268()) {
 		val = 0x18000000;
+	} else if (BCMCPU_IS_3380()) {
+		val = 0x1fc00000;
 	} else {
 		val = bcm_mpi_readl(MPI_CSBASE_REG(0));
 		val &= MPI_CSBASE_BASE_MASK;
@@ -5035,7 +5037,7 @@ void __init board_prom_init(void)
 
 	bcm63xx_nvram_init(boot_addr + BCM963XX_NVRAM_OFFSET);
 
-	if (BCMCPU_IS_3368()) {
+	if (BCMCPU_IS_3368() || BCMCPU_IS_3380()) {
 		hcs = (struct bcm_hcs *)boot_addr;
 		board_name = hcs->filename;
 	} else {
--- a/arch/mips/bcm63xx/cpu.c
+++ b/arch/mips/bcm63xx/cpu.c
@@ -41,6 +41,14 @@ static const int bcm3368_irqs[] = {
 	__GEN_CPU_IRQ_TABLE(3368)
 };
 
+static const unsigned long bcm3380_regs_base[] = {
+	__GEN_CPU_REGS_TABLE(3380)
+};
+
+static const int bcm3380_irqs[] = {
+	__GEN_CPU_IRQ_TABLE(3380)
+};
+
 static const unsigned long bcm6318_regs_base[] = {
 	__GEN_CPU_REGS_TABLE(6318)
 };
@@ -150,6 +158,7 @@ static unsigned int detect_cpu_clock(voi
 {
 	switch (bcm63xx_get_cpu_id()) {
 	case BCM3368_CPU_ID:
+	case BCM3380_CPU_ID:
 		return 300000000;
 
 	case BCM6318_CPU_ID:
@@ -336,6 +345,9 @@ static unsigned int detect_memory_size(v
 		return 1 << (val + 20);
 	}
 
+	if (BCMCPU_IS_3380())
+		return (16 * 1024 * 1024);
+
 	if (BCMCPU_IS_6328() || BCMCPU_IS_6362() || BCMCPU_IS_63268())
 		return bcm_ddr_readl(DDR_CSEND_REG) << 24;
 
@@ -403,6 +415,9 @@ void __init bcm63xx_cpu_init(void)
 		case 0x10:
 			chipid_reg = BCM_6345_PERF_BASE;
 			break;
+		case 0x70:
+			chipid_reg = BCM_3380_PERF_BASE;
+			break;
 		case 0x80:
 			long_chipid = true;
 			/* fall-through */
@@ -444,6 +459,10 @@ void __init bcm63xx_cpu_init(void)
 		bcm63xx_regs_base = bcm3368_regs_base;
 		bcm63xx_irqs = bcm3368_irqs;
 		break;
+	case BCM3380_CPU_ID:
+		bcm63xx_regs_base = bcm3380_regs_base;
+		bcm63xx_irqs = bcm3380_irqs;
+		break;
 	case BCM6328_CPU_ID:
 		bcm63xx_regs_base = bcm6328_regs_base;
 		bcm63xx_irqs = bcm6328_irqs;
--- a/arch/mips/bcm63xx/dev-enet.c
+++ b/arch/mips/bcm63xx/dev-enet.c
@@ -210,6 +210,9 @@ int __init bcm63xx_enet_register(int uni
 	if (unit > 1)
 		return -ENODEV;
 
+	if (BCMCPU_IS_3380())
+		return -ENODEV;
+
 	if (unit == 1 && (BCMCPU_IS_6338() || BCMCPU_IS_6345()))
 		return -ENODEV;
 
--- a/arch/mips/bcm63xx/dev-flash.c
+++ b/arch/mips/bcm63xx/dev-flash.c
@@ -85,6 +85,8 @@ static int __init bcm63xx_detect_flash_t
 	u32 val;
 
 	switch (bcm63xx_get_cpu_id()) {
+	case BCM3380_CPU_ID:
+		return BCM63XX_FLASH_TYPE_SERIAL;
 	case BCM6318_CPU_ID:
 		/* only support serial flash */
 		bcm63xx_spi_flash_info[0].max_speed_hz = 62500000;
--- a/arch/mips/bcm63xx/dev-spi.c
+++ b/arch/mips/bcm63xx/dev-spi.c
@@ -36,7 +36,7 @@ static __init void bcm63xx_spi_regs_init
 {
 	if (BCMCPU_IS_6338() || BCMCPU_IS_6348())
 		bcm63xx_regs_spi = bcm6348_regs_spi;
-	if (BCMCPU_IS_3368() || BCMCPU_IS_6358() ||
+	if (BCMCPU_IS_3368() || BCMCPU_IS_3380() || BCMCPU_IS_6358() ||
 		BCMCPU_IS_6362() || BCMCPU_IS_6368() || BCMCPU_IS_63268())
 		bcm63xx_regs_spi = bcm6358_regs_spi;
 }
@@ -84,7 +84,7 @@ int __init bcm63xx_spi_register(void)
 		spi_pdata.msg_ctl_width = SPI_6348_MSG_CTL_WIDTH;
 	}
 
-	if (BCMCPU_IS_3368() || BCMCPU_IS_6358() || BCMCPU_IS_6362() ||
+	if (BCMCPU_IS_3368() || BCMCPU_IS_3380() || BCMCPU_IS_6358() || BCMCPU_IS_6362() ||
 		BCMCPU_IS_6368() || BCMCPU_IS_63268()) {
 		spi_resources[0].end += BCM_6358_RSET_SPI_SIZE - 1;
 		spi_pdata.fifo_size = SPI_6358_MSG_DATA_SIZE;
--- a/arch/mips/bcm63xx/dev-uart.c
+++ b/arch/mips/bcm63xx/dev-uart.c
@@ -54,8 +54,8 @@ int __init bcm63xx_uart_register(unsigne
 	if (id >= ARRAY_SIZE(bcm63xx_uart_devices))
 		return -ENODEV;
 
-	if (id == 1 && (!BCMCPU_IS_3368() && !BCMCPU_IS_6358() &&
-		!BCMCPU_IS_6368()))
+	if (id == 1 && (!BCMCPU_IS_3368() && !BCMCPU_IS_3380() &&
+		!BCMCPU_IS_6358() && !BCMCPU_IS_6368()))
 		return -ENODEV;
 
 	if (id == 0) {
--- a/arch/mips/bcm63xx/irq.c
+++ b/arch/mips/bcm63xx/irq.c
@@ -224,6 +224,8 @@ static void bcm63xx_external_irq_mask(st
 
 	if (BCMCPU_IS_6348())
 		reg &= ~EXTIRQ_CFG_MASK_6348(irq % 4);
+	else if (BCMCPU_IS_3380())
+		reg &= ~EXTIRQ_CFG_MASK_3380(irq % 6);
 	else
 		reg &= ~EXTIRQ_CFG_MASK(irq % 4);
 
@@ -246,6 +248,8 @@ static void bcm63xx_external_irq_unmask(
 
 	if (BCMCPU_IS_6348())
 		reg |= EXTIRQ_CFG_MASK_6348(irq % 4);
+	else if (BCMCPU_IS_3380())
+		reg |= EXTIRQ_CFG_MASK_3380(irq % 6);
 	else
 		reg |= EXTIRQ_CFG_MASK(irq % 4);
 
@@ -269,6 +273,8 @@ static void bcm63xx_external_irq_clear(s
 
 	if (BCMCPU_IS_6348())
 		reg |= EXTIRQ_CFG_CLEAR_6348(irq % 4);
+	else if (BCMCPU_IS_3380())
+		reg |= EXTIRQ_CFG_CLEAR_3380(irq % 6);
 	else
 		reg |= EXTIRQ_CFG_CLEAR(irq % 4);
 
@@ -336,7 +342,20 @@ static int bcm63xx_external_irq_set_type
 		else
 			reg &= ~EXTIRQ_CFG_BOTHEDGE_6348(irq);
 		break;
-
+	case BCM3380_CPU_ID:
+		if (levelsense)
+			reg |= EXTIRQ_CFG_LEVELSENSE_3380(irq);
+		else
+			reg &= ~EXTIRQ_CFG_LEVELSENSE_3380(irq);
+		if (sense)
+			reg |= EXTIRQ_CFG_SENSE_3380(irq);
+		else
+			reg &= ~EXTIRQ_CFG_SENSE_3380(irq);
+		if (bothedge)
+			reg |= EXTIRQ_CFG_BOTHEDGE_3380(irq);
+		else
+			reg &= ~EXTIRQ_CFG_BOTHEDGE_3380(irq);
+		break;
 	case BCM3368_CPU_ID:
 	case BCM6328_CPU_ID:
 	case BCM6338_CPU_ID:
@@ -441,6 +460,16 @@ static void bcm63xx_init_irq(void)
 		ext_irq_count = 4;
 		ext_irq_cfg_reg1 = PERF_EXTIRQ_CFG_REG_3368;
 		break;
+	case BCM3380_CPU_ID:
+		irq_stat_addr[0] += PERF_IRQSTAT_3380_REG;
+		irq_mask_addr[0] += PERF_IRQMASK_3380_REG;
+		irq_bits = 32;
+		ext_irq_count = 6;
+		is_ext_irq_cascaded = 1;
+		ext_irq_start = BCM_3380_EXT_IRQ0 - IRQ_INTERNAL_BASE;
+		ext_irq_end = BCM_3380_EXT_IRQ5 - IRQ_INTERNAL_BASE;
+		ext_irq_cfg_reg1 = PERF_EXTIRQ_CFG_REG_3380;
+		break;
 	case BCM6318_CPU_ID:
 		irq_stat_addr[0] += PERF_IRQSTAT_6318_REG;
 		irq_mask_addr[0] += PERF_IRQMASK_6318_REG;
--- a/arch/mips/bcm63xx/Kconfig
+++ b/arch/mips/bcm63xx/Kconfig
@@ -6,6 +6,9 @@ config BCM63XX_CPU_3368
 	select SYS_HAS_CPU_BMIPS4350
 	select HW_HAS_PCI
 
+config BCM63XX_CPU_3380
+	bool "support 3380 CPU"
+
 config BCM63XX_OHCI
 	bool
 	select USB_ARCH_HAS_OHCI
--- a/arch/mips/bcm63xx/nvram.c
+++ b/arch/mips/bcm63xx/nvram.c
@@ -79,7 +79,7 @@ void __init bcm63xx_nvram_init(void *add
 	 * firmware and not easily extractible, give at least a MAC address
 	 * pool.
 	 */
-	if (BCMCPU_IS_3368()) {
+	if (BCMCPU_IS_3368() || BCMCPU_IS_3380()) {
 		memcpy(nvram.mac_addr_base, hcs_mac_addr, ETH_ALEN);
 		nvram.mac_addr_count = 2;
 	}
--- a/arch/mips/bcm63xx/prom.c
+++ b/arch/mips/bcm63xx/prom.c
@@ -33,6 +33,8 @@ void __init prom_init(void)
 	/* disable all hardware blocks clock for now */
 	if (BCMCPU_IS_3368())
 		mask = CKCTL_3368_ALL_SAFE_EN;
+	else if (BCMCPU_IS_3380())
+		mask = CKCTL_3380_ALL_SAFE_EN;
 	else if (BCMCPU_IS_6328())
 		mask = CKCTL_6328_ALL_SAFE_EN;
 	else if (BCMCPU_IS_6338())
--- a/arch/mips/bcm63xx/reset.c
+++ b/arch/mips/bcm63xx/reset.c
@@ -47,6 +47,20 @@
 #define BCM3368_RESET_PCIE_CORE	0
 #define BCM3368_RESET_PCIE_HARD	0
 
+#define BCM3380_RESET_SPI	SOFTRESET_3380_SPI_MASK
+#define BCM3380_RESET_ENET	0
+#define BCM3380_RESET_USBH	0
+#define BCM3380_RESET_USBD	0
+#define BCM3380_RESET_DSL	0
+#define BCM3380_RESET_SAR	0
+#define BCM3380_RESET_EPHY	0
+#define BCM3380_RESET_ENETSW	0
+#define BCM3380_RESET_PCM	SOFTRESET_3380_PCM_MASK
+#define BCM3380_RESET_MPI	0
+#define BCM3380_RESET_PCIE	0
+#define BCM3380_RESET_PCIE_EXT	0
+#define BCM3380_RESET_PCIE_CORE	0
+#define BCM3380_RESET_PCIE_HARD	0
 
 #define BCM6318_RESET_SPI	SOFTRESET_6318_SPI_MASK
 #define BCM6318_RESET_ENET	0
@@ -175,6 +189,10 @@ static const u32 bcm3368_reset_bits[] =
 	__GEN_RESET_BITS_TABLE(3368)
 };
 
+static const u32 bcm3380_reset_bits[] = {
+	__GEN_RESET_BITS_TABLE(3380)
+};
+
 static const u32 bcm6318_reset_bits[] = {
 	__GEN_RESET_BITS_TABLE(6318)
 };
@@ -215,6 +233,9 @@ static int __init bcm63xx_reset_bits_ini
 	if (BCMCPU_IS_3368()) {
 		reset_reg = PERF_SOFTRESET_6358_REG;
 		bcm63xx_reset_bits = bcm3368_reset_bits;
+	} else if (BCMCPU_IS_3380()) {
+		reset_reg = PERF_SOFTRESET_6358_REG;
+		bcm63xx_reset_bits = bcm3380_reset_bits;
 	} else if (BCMCPU_IS_6318()) {
 		reset_reg = PERF_SOFTRESET_6318_REG;
 		bcm63xx_reset_bits = bcm6318_reset_bits;
--- a/arch/mips/include/asm/mach-bcm63xx/bcm63xx_cpu.h
+++ b/arch/mips/include/asm/mach-bcm63xx/bcm63xx_cpu.h
@@ -10,6 +10,7 @@
  * arm mach-types)
  */
 #define BCM3368_CPU_ID		0x3368
+#define BCM3380_CPU_ID		0x3380
 #define BCM6318_CPU_ID		0x6318
 #define BCM6328_CPU_ID		0x6328
 #define BCM63281_CPU_ID		0x63281
@@ -39,6 +40,10 @@ static inline u32 __pure __bcm63xx_get_c
 		case BCM3368_CPU_ID:
 #endif
 
+#ifdef CONFIG_BCM63XX_CPU_3380
+		case BCM3380_CPU_ID:
+#endif
+
 #ifdef CONFIG_BCM63XX_CPU_6318
 		case BCM6318_CPU_ID:
 #endif
@@ -92,6 +97,7 @@ static inline u32 __pure bcm63xx_get_cpu
 }
 
 #define BCMCPU_IS_3368()	(bcm63xx_get_cpu_id() == BCM3368_CPU_ID)
+#define BCMCPU_IS_3380()	(bcm63xx_get_cpu_id() == BCM3380_CPU_ID)
 #define BCMCPU_IS_6318()	(bcm63xx_get_cpu_id() == BCM6318_CPU_ID)
 #define BCMCPU_IS_6328()	(bcm63xx_get_cpu_id() == BCM6328_CPU_ID)
 #define BCMCPU_IS_6338()	(bcm63xx_get_cpu_id() == BCM6338_CPU_ID)
@@ -104,6 +110,8 @@ static inline u32 __pure bcm63xx_get_cpu
 
 #define BCMCPU_VARIANT_IS_3368() \
 	(bcm63xx_get_cpu_variant() == BCM3368_CPU_ID)
+#define BCMCPU_VARIANT_IS_3380() \
+	(bcm63xx_get_cpu_variant() == BCM3380_CPU_ID)
 #define BCMCPU_VARIANT_IS_6318() \
 	(bcm63xx_get_cpu_variant() == BCM6318_CPU_ID)
 #define BCMCPU_VARIANT_IS_63281() \
@@ -260,6 +268,53 @@ enum bcm63xx_regs_set {
 #define BCM_3368_MISC_BASE		(0xdeadbeef)
 
 /*
++ * 3380 register set base address
++ */
+#define BCM_3380_DSL_LMEM_BASE		(0xdeadbeef)
+#define BCM_3380_PERF_BASE		(0xb4e00000)
+#define BCM_3380_TIMER_BASE		(0xb4e000c0)
+#define BCM_3380_WDT_BASE		(0xb4e000dc)
+#define BCM_3380_UART0_BASE		(0xb4e00200)
+#define BCM_3380_UART1_BASE		(0xb4e00220)
+#define BCM_3380_GPIO_BASE		(0xb4e00100)
+#define BCM_3380_SPI_BASE		(0xb4e00400)
+#define BCM_3380_HSSPI_BASE		(0xdeadbeef)
+#define BCM_3380_UDC0_BASE		(0xdeadbeef)
+#define BCM_3380_USBDMA_BASE		(0xdeadbeef)
+#define BCM_3380_OHCI0_BASE		(0xdeadbeef)
+#define BCM_3380_OHCI_PRIV_BASE		(0xdeadbeef)
+#define BCM_3380_USBH_PRIV_BASE		(0xdeadbeef)
+#define BCM_3380_USBD_BASE		(0xdeadbeef)
+#define BCM_3380_MPI_BASE		(0xdeadbeef)
+#define BCM_3380_PCMCIA_BASE		(0xdeadbeef)
+#define BCM_3380_PCIE_BASE		(0xdeadbeef)
+#define BCM_3380_SDRAM_REGS_BASE	(0xdeadbeef)
+#define BCM_3380_DSL_BASE		(0xdeadbeef)
+#define BCM_3380_UBUS_BASE		(0xdeadbeef)
+#define BCM_3380_ENET0_BASE		(0xdeadbeef)
+#define BCM_3380_ENET1_BASE		(0xdeadbeef)
+#define BCM_3380_ENETDMA_BASE		(0xdeadbeef)
+#define BCM_3380_ENETDMAC_BASE		(0xdeadbeef)
+#define BCM_3380_ENETDMAS_BASE		(0xdeadbeef)
+#define BCM_3380_ENETSW_BASE		(0xdeadbeef)
+#define BCM_3380_EHCI0_BASE		(0xdeadbeef)
+#define BCM_3380_SDRAM_BASE		(0xdeadbeef)
+#define BCM_3380_MEMC_BASE		(0x12000000)
+#define BCM_3380_DDR_BASE		(0xdeadbeef)
+#define BCM_3380_M2M_BASE		(0xdeadbeef)
+#define BCM_3380_ATM_BASE		(0xdeadbeef)
+#define BCM_3380_XTM_BASE		(0xdeadbeef)
+#define BCM_3380_XTMDMA_BASE		(0xdeadbeef)
+#define BCM_3380_XTMDMAC_BASE		(0xdeadbeef)
+#define BCM_3380_XTMDMAS_BASE		(0xdeadbeef)
+#define BCM_3380_PCM_BASE		(0xdeadbeef)
+#define BCM_3380_PCMDMA_BASE		(0xdeadbeef)
+#define BCM_3380_PCMDMAC_BASE		(0xdeadbeef)
+#define BCM_3380_PCMDMAS_BASE		(0xdeadbeef)
+#define BCM_3380_RNG_BASE		(0xdeadbeef)
+#define BCM_3380_MISC_BASE		(0xdeadbeef)
+
+/*
  * 6318 register sets base address
  */
 #define BCM_6318_DSL_LMEM_BASE		(0xdeadbeef)
@@ -878,6 +933,55 @@ enum bcm63xx_irq {
 #define BCM_3368_EXT_IRQ3		(IRQ_INTERNAL_BASE + 28)
 
 /*
+ * 3380 irqs
+ */
+#define BCM_3380_TIMER_IRQ		(IRQ_INTERNAL_BASE + 0)
+#define BCM_3380_SPI_IRQ		(IRQ_INTERNAL_BASE + 1)
+#define BCM_3380_UART0_IRQ		(IRQ_INTERNAL_BASE + 2)
+#define BCM_3380_UART1_IRQ		(IRQ_INTERNAL_BASE + 3)
+#define BCM_3380_DSL_IRQ		0
+#define BCM_3380_UDC0_IRQ		0
+#define BCM_3380_OHCI0_IRQ		0
+#define BCM_3380_ENET0_IRQ		0
+#define BCM_3380_ENET1_IRQ		0
+#define BCM_3380_ENET_PHY_IRQ		0
+#define BCM_3380_ENET0_RXDMA_IRQ	0
+#define BCM_3380_ENET0_TXDMA_IRQ	0
+#define BCM_3380_HSSPI_IRQ		(IRQ_INTERNAL_BASE + 7)
+#define BCM_3380_EHCI0_IRQ		0
+#define BCM_3380_USBD_IRQ		0
+#define BCM_3380_USBD_RXDMA0_IRQ	0
+#define BCM_3380_USBD_TXDMA0_IRQ	0
+#define BCM_3380_USBD_RXDMA1_IRQ	0
+#define BCM_3380_USBD_TXDMA1_IRQ	0
+#define BCM_3380_USBD_RXDMA2_IRQ	0
+#define BCM_3380_USBD_TXDMA2_IRQ	0
+#define BCM_3380_ENET1_RXDMA_IRQ        0
+#define BCM_3380_ENET1_TXDMA_IRQ        0
+#define BCM_3380_PCI_IRQ		0
+#define BCM_3380_PCMCIA_IRQ		0
+#define BCM_3380_ATM_IRQ		0
+#define BCM_3380_ENETSW_RXDMA0_IRQ	0
+#define BCM_3380_ENETSW_RXDMA1_IRQ	0
+#define BCM_3380_ENETSW_RXDMA2_IRQ	0
+#define BCM_3380_ENETSW_RXDMA3_IRQ	0
+#define BCM_3380_ENETSW_TXDMA0_IRQ	0
+#define BCM_3380_ENETSW_TXDMA1_IRQ	0
+#define BCM_3380_ENETSW_TXDMA2_IRQ	0
+#define BCM_3380_ENETSW_TXDMA3_IRQ	0
+#define BCM_3380_XTM_IRQ		0
+#define BCM_3380_XTM_DMA0_IRQ		0
+
+#define BCM_3380_HIGH_IRQ_BASE		(IRQ_INTERNAL_BASE + 32)
+
+#define BCM_3380_EXT_IRQ0		(BCM_3380_HIGH_IRQ_BASE + 0)
+#define BCM_3380_EXT_IRQ1		(BCM_3380_HIGH_IRQ_BASE + 1)
+#define BCM_3380_EXT_IRQ2		(BCM_3380_HIGH_IRQ_BASE + 2)
+#define BCM_3380_EXT_IRQ3		(BCM_3380_HIGH_IRQ_BASE + 3)
+#define BCM_3380_EXT_IRQ4		(BCM_3380_HIGH_IRQ_BASE + 4)
+#define BCM_3380_EXT_IRQ5		(BCM_3380_HIGH_IRQ_BASE + 5)
+
+/*
  * 6318 irqs
  */
 #define BCM_6318_HIGH_IRQ_BASE		(IRQ_INTERNAL_BASE + 32)
--- a/arch/mips/include/asm/mach-bcm63xx/bcm63xx_gpio.h
+++ b/arch/mips/include/asm/mach-bcm63xx/bcm63xx_gpio.h
@@ -13,6 +13,8 @@ static inline unsigned long bcm63xx_gpio
 		return 50;
 	case BCM6328_CPU_ID:
 		return 32;
+	case BCM3380_CPU_ID:
+		return 35;
 	case BCM3368_CPU_ID:
 	case BCM6358_CPU_ID:
 		return 40;
--- a/arch/mips/include/asm/mach-bcm63xx/bcm63xx_regs.h
+++ b/arch/mips/include/asm/mach-bcm63xx/bcm63xx_regs.h
@@ -52,6 +52,33 @@
 					 CKCTL_3368_EMUSB_EN | \
 					 CKCTL_3368_USBU_EN)
 
+#define CKCTL_3368_ALL_SAFE_EN		(CKCTL_3368_MAC_EN | \
+					 CKCTL_3368_TC_EN | \
+					 CKCTL_3368_US_TOP_EN | \
+					 CKCTL_3368_DS_TOP_EN | \
+					 CKCTL_3368_APM_EN | \
+					 CKCTL_3368_SPI_EN | \
+					 CKCTL_3368_USBS_EN | \
+					 CKCTL_3368_BMU_EN | \
+					 CKCTL_3368_PCM_EN | \
+					 CKCTL_3368_NTP_EN | \
+					 CKCTL_3368_ACP_B_EN | \
+					 CKCTL_3368_ACP_A_EN | \
+					 CKCTL_3368_EMUSB_EN | \
+					 CKCTL_3368_USBU_EN)
+
+#define CKCTL_3368_DDR_EN		(1 << 0)
+#define CKCTL_3380_FPM_EN		(1 << 1)
+#define CKCTL_3380_CRYPTO_EN		(1 << 2)
+#define CKCTL_3380_EPHY_EN		(1 << 3)
+#define CKCTL_3380_PCIE_EN		(1 << 16)
+#define CKCTL_3380_SPI_EN		(1 << 17)
+#define CKCTL_3380_ENET0_EN		(1 << 18)
+#define CKCTL_3380_ENET1_EN		(1 << 19)
+#define CKCTL_3380_PCM_EN		(1 << 27)
+
+#define CKCTL_3380_ALL_SAFE_EN		(0)
+
 #define CKCTL_6318_ADSL_ASB_EN		(1 << 0)
 #define CKCTL_6318_USB_ASB_EN		(1 << 1)
 #define CKCTL_6318_MIPS_ASB_EN		(1 << 2)
@@ -312,6 +339,7 @@
 
 /* Interrupt Mask register */
 #define PERF_IRQMASK_3368_REG		0xc
+#define PERF_IRQMASK_3380_REG		0x30
 #define PERF_IRQMASK_6318_REG		0x20
 #define PERF_IRQMASK_6328_REG(x)	(0x20 + (x) * 0x10)
 #define PERF_IRQMASK_6338_REG		0xc
@@ -324,6 +352,7 @@
 
 /* Interrupt Status register */
 #define PERF_IRQSTAT_3368_REG		0x10
+#define PERF_IRQSTAT_3380_REG		0x34
 #define PERF_IRQSTAT_6318_REG		0x30
 #define PERF_IRQSTAT_6328_REG(x)	(0x28 + (x) * 0x10)
 #define PERF_IRQSTAT_6338_REG		0x10
@@ -336,6 +365,7 @@
 
 /* External Interrupt Configuration register */
 #define PERF_EXTIRQ_CFG_REG_3368	0x14
+#define PERF_EXTIRQ_CFG_REG_3380	0x6c
 #define PERF_EXTIRQ_CFG_REG_6318	0x18
 #define PERF_EXTIRQ_CFG_REG_6328	0x18
 #define PERF_EXTIRQ_CFG_REG_6338	0x14
@@ -358,6 +388,16 @@
 #define EXTIRQ_CFG_CLEAR_ALL_6348	(0xf << 10)
 #define EXTIRQ_CFG_MASK_ALL_6348	(0xf << 15)
 
+/* for 3380 only */
+#define EXTIRQ_CFG_SENSE_3380(x)	(1 << (x))
+#define EXTIRQ_CFG_STAT_3380(x)		(1 << (x + 6))
+#define EXTIRQ_CFG_CLEAR_3380(x)	(1 << (x + 6))
+#define EXTIRQ_CFG_MASK_3380(x)		(1 << (x + 12))
+#define EXTIRQ_CFG_BOTHEDGE_3380(x)	(1 << (x + 18))
+#define EXTIRQ_CFG_LEVELSENSE_3380(x)	(1 << (x + 24))
+#define EXTIRQ_CFG_CLEAR_ALL_3380	(0x1f << 12)
+#define EXTIRQ_CFG_MASK_ALL_3380	(0x1f << 12)
+
 /* for all others */
 #define EXTIRQ_CFG_SENSE(x)		(1 << (x))
 #define EXTIRQ_CFG_STAT(x)		(1 << (x + 4))
@@ -370,6 +410,7 @@
 
 /* Soft Reset register */
 #define PERF_SOFTRESET_REG		0x28
+#define PERF_SOFTRESET_3380_REG		0x8c
 #define PERF_SOFTRESET_6318_REG		0x10
 #define PERF_SOFTRESET_6328_REG		0x10
 #define PERF_SOFTRESET_6358_REG		0x34
@@ -384,6 +425,9 @@
 #define SOFTRESET_3368_USBS_MASK	(1 << 11)
 #define SOFTRESET_3368_PCM_MASK		(1 << 13)
 
+#define SOFTRESET_3380_SPI_MASK		(1 << 0)
+#define SOFTRESET_3380_PCM_MASK		(1 << 13)
+
 #define SOFTRESET_6318_SPI_MASK		(1 << 0)
 #define SOFTRESET_6318_EPHY_MASK	(1 << 1)
 #define SOFTRESET_6318_SAR_MASK		(1 << 2)
--- a/arch/mips/include/asm/mach-bcm63xx/ioremap.h
+++ b/arch/mips/include/asm/mach-bcm63xx/ioremap.h
@@ -15,6 +15,10 @@ static inline int is_bcm63xx_internal_re
 		if (offset >= 0xfff80000)
 			return 1;
 		break;
+	case BCM3380_CPU_ID:
+		if (offset >= 0xb2000000 && offset < 0xb5410000)
+			return 1;
+		break;
 	case BCM6338_CPU_ID:
 	case BCM6345_CPU_ID:
 	case BCM6348_CPU_ID:
